// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("CONECTION_POOL_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  // citizen | staff | admin (warden) | chief_admin
  role     String @default("citizen") // citizen | staff | admin|chief admin

  staffRequest Boolean @default(false) // did user apply for staff?

  // Complaints reported by this user (citizen role)
  reportedComplaints Complaint[] @relation("Reporter")

  // Complaints assigned to this user (staff role)
  assignedComplaints Complaint[] @relation("Assignee")

  // If this user is an Admin/Warden/staff, link them to a Hostel
  hostelId Int?
  hostel   Hostel? @relation(fields: [hostelId], references: [id])
}

model Hostel {
  id    Int    @id @default(autoincrement())
  name  String @unique
  block String? // optional: block number/name

  // Relations
  admins     User[] // wardens for this hostel
  complaints Complaint[]
}

model Complaint {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  category    String
  area        String
  status      String  @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED
  photoUrl    String?

  // Who reported it (citizen)
  reporterId Int
  reporter   User @relation("Reporter", fields: [reporterId], references: [id])

  // Who is assigned (staff)
  assignedToId Int?
  assignedTo   User? @relation("Assignee", fields: [assignedToId], references: [id])

  // Which hostel the complaint belongs to (nullable â†’ misc)
  hostelId Int?
  hostel   Hostel? @relation(fields: [hostelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resolvedAt DateTime?
}
